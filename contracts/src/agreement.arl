archetype agreement(
    share_address : address, 
    recipient : address, 
    company_address : address, 
    expiration_date : date, 
    strike_price : tez,
    vesting : list<date * nat>
)

variable exercised_tokens : nat = 0

entry execute(amount : nat) {
    called by recipient
    require {
        // TODO: has not resigned
        r1 : now <= expiration_date otherwise "Expired";
        r2: transferred = amount*strike_price
    }
    effect {
        var b : balances = calculateBalance();

        do_fail_if(amount > b.available, "NotEnoughAvailable");

        transfer 0tz to share_address call %transfer<address * address * nat>((self_address, recipient, amount));

        // TODO: accept other currencies
        transfer transferred to company_address;
        exercised_tokens += amount;
    }
}

record balances {granted : nat; future : nat; available : nat; exercised : nat}

function calculateBalance() :  balances {
    var vested_tokens : nat = 0;
    var granted_tokens : nat = 0;

    for pair in vesting do
        vested_tokens += (now >= pair[0]) ? pair[1] : 0;
        granted_tokens += pair[1];
    done;

    var available_tokens : nat ?= int_to_nat(vested_tokens - exercised_tokens); 
    var future_tokens : nat ?= int_to_nat(granted_tokens - vested_tokens); 
    
    return {
        granted = granted_tokens;
        exercised = exercised_tokens;
        available = available_tokens;
        future = future_tokens
    }
}

view getBalances() : balances {
    var response : balances = calculateBalance();
    return response
}
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var archetype_ts_types_1 = require("@completium/archetype-ts-types");
var src_1 = require("../src");
var Completium = require('@completium/completium-cli');
var assert = require('assert');
(0, src_1.set_quiet)(true);
(0, src_1.set_mockup)();
describe('Completium', function () {
    it('deploy', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, addr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/simple.arl', {}, { as: alice })];
                case 1:
                    addr = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('originate', function () { return __awaiter(void 0, void 0, void 0, function () {
        var bob, storage, addr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    bob = (0, src_1.get_account)('bob');
                    storage = new archetype_ts_types_1.Nat(0);
                    return [4 /*yield*/, (0, src_1.originate)('./tests/contracts/simple.tz', storage.to_mich(), { as: bob })];
                case 1:
                    addr = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('call', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/simple.arl', {}, { as: alice })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, (0, src_1.call)(res.address, "exec", { prim: "Unit" }, { as: alice })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('expect_to_fail', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/error.arl', {}, { as: alice })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, (0, src_1.expect_to_fail)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, src_1.call)(res.address, "exec", { prim: "Unit" }, { as: alice })];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, { "string": "error" })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('get_big_map_value', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res, storage, big_map_id, key_value, key_type, value;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/big_map.arl', {}, { as: alice })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, (0, src_1.get_storage)(res.address)];
                case 2:
                    storage = _a.sent();
                    big_map_id = storage;
                    key_value = { int: "2" };
                    key_type = { prim: "nat", annots: [] };
                    return [4 /*yield*/, (0, src_1.get_big_map_value)(big_map_id, key_value, key_type)];
                case 3:
                    value = _a.sent();
                    assert(JSON.stringify(value) == "{\"string\":\"mystr\"}");
                    return [2 /*return*/];
            }
        });
    }); });
    it('get_big_map_value with value', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res, storage, big_map_id, key_value, key_type, value_type, value;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/big_map.arl', {}, { as: alice })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, (0, src_1.get_storage)(res.address)];
                case 2:
                    storage = _a.sent();
                    big_map_id = storage;
                    key_value = { int: "2" };
                    key_type = { prim: "nat", annots: [] };
                    value_type = { prim: "string", annots: [] };
                    return [4 /*yield*/, (0, src_1.get_big_map_value)(big_map_id, key_value, key_type, value_type)];
                case 3:
                    value = _a.sent();
                    assert(value == 'mystr');
                    return [2 /*return*/];
            }
        });
    }); });
    it('get_storage', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res, storage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/simple.arl', {}, { as: alice })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, (0, src_1.get_storage)(res.address)];
                case 2:
                    storage = _a.sent();
                    assert(storage == '0');
                    return [2 /*return*/];
            }
        });
    }); });
    it('get_raw_storage', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res, storage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/simple.arl', {}, { as: alice })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, (0, src_1.get_raw_storage)(res.address)];
                case 2:
                    storage = _a.sent();
                    assert(storage.int == '0');
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('Account', function () {
    it('sign', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, data, sig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    data = new archetype_ts_types_1.Bytes("050002");
                    return [4 /*yield*/, alice.sign(data)];
                case 1:
                    sig = _a.sent();
                    assert(sig.toString() == "edsigtZ5u2yo1EfNLoxaPKafnmDZ6q1tjaP6deA7mX5dwx6GyPoN3Y3BfJv76jDcTAy9wsxkL1AQzFb4FvTWxLAtaXiS2dQg9gw", "Bad signature for alice");
                    return [2 /*return*/];
            }
        });
    }); });
    it('sign anonymous', function () { return __awaiter(void 0, void 0, void 0, function () {
        var unknown_account, data, sig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    unknown_account = new src_1.Account('unknow_account', 'edpkuvdBStTR7oFxDZ39siJEZzBMhwiq36uGCJmKP1tajbqGF8hnsv', 'tz1NwuWKWdvnzWye8LuDVNYAtZd86gXWMgbD', 'edskRet5YfuDNHomHY4NGPxDpEHTiQSQUBdQSp24bXExsQx5Zej5Bk2nMe22UzpLmSZ75w9adpmF97edazuZLHqDoibeDsKLq3');
                    data = new archetype_ts_types_1.Bytes("050002");
                    return [4 /*yield*/, unknown_account.sign(data)];
                case 1:
                    sig = _a.sent();
                    assert(sig.toString() == "edsigu6PJedxVVMgAXMBJUfkGv5B1aAcrBr33fo8t97evCJ9cHMSpnznz29QLu7gHgfdxdDiXJ1Wuzyd7CdtnsHseEV4rtyWv1X", "Bad signature for unknown_account");
                    return [2 /*return*/];
            }
        });
    }); });
    it('originate', function () { return __awaiter(void 0, void 0, void 0, function () {
        var bob, storage, addr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    bob = (0, src_1.get_account)('bob');
                    storage = new archetype_ts_types_1.Nat(0);
                    return [4 /*yield*/, (0, src_1.originate)('./tests/contracts/simple.tz', storage.to_mich(), { as: bob })];
                case 1:
                    addr = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('Mockup', function () {
    it('set_endpoint', function () {
        (0, src_1.set_endpoint)('mockup');
    });
    it('get_endpoint', function () {
        var endpoint = (0, src_1.get_endpoint)();
        assert(endpoint == 'mockup');
    });
    it('set_mockup', function () {
        (0, src_1.set_mockup)();
    });
    it('set_mockup', function () {
        assert((0, src_1.is_mockup)());
    });
});
describe('Mockup time', function () {
    it('set and get mockup_now', function () {
        var d = new Date("2020-01-01T00:00:01.000Z");
        (0, src_1.set_mockup_now)(d);
        var nd = (0, src_1.get_mockup_now)();
        assert(d.toISOString() == nd.toISOString(), "Invalid value");
    });
    it('set and get mockup_now', function () {
        var d = new Date("2020-01-01T00:00:01.001Z");
        (0, src_1.set_mockup_now)(d);
        var nd = (0, src_1.get_mockup_now)();
        assert(nd.toISOString() == "2020-01-01T00:00:01.000Z", "Invalid value");
    });
    it('set and get mockup_now', function () {
        var d = new Date("2020-01-01T00:00:01.999Z");
        (0, src_1.set_mockup_now)(d);
        var nd = (0, src_1.get_mockup_now)();
        assert(nd.toISOString() == "2020-01-01T00:00:01.000Z", "Invalid value");
    });
    it('delay_mockup_now_by_second', function () {
        var d = new Date("2020-01-01T00:00:01.000Z");
        (0, src_1.set_mockup_now)(d);
        var nd = (0, src_1.get_mockup_now)();
        assert(d.toISOString() == nd.toISOString(), "Invalid value");
        (0, src_1.delay_mockup_now_by_second)(2);
        var v = (0, src_1.get_mockup_now)();
        assert(v.toISOString() == "2020-01-01T00:00:03.000Z", "Invalid value");
    });
    it('delay_mockup_now_by_minute', function () {
        var d = new Date("2020-01-01T00:00:01.000Z");
        (0, src_1.set_mockup_now)(d);
        var nd = (0, src_1.get_mockup_now)();
        assert(d.toISOString() == nd.toISOString(), "Invalid value");
        (0, src_1.delay_mockup_now_by_minute)(2);
        var v = (0, src_1.get_mockup_now)();
        assert(v.toISOString() == "2020-01-01T00:02:01.000Z", "Invalid value");
    });
    it('delay_mockup_now_by_hour', function () {
        var d = new Date("2020-01-01T00:00:01.000Z");
        (0, src_1.set_mockup_now)(d);
        var nd = (0, src_1.get_mockup_now)();
        assert(d.toISOString() == nd.toISOString(), "Invalid value");
        (0, src_1.delay_mockup_now_by_hour)(2);
        var v = (0, src_1.get_mockup_now)();
        assert(v.toISOString() == "2020-01-01T02:00:01.000Z", "Invalid value");
    });
    it('delay_mockup_now_by_day', function () {
        var d = new Date("2020-01-01T00:00:01.000Z");
        (0, src_1.set_mockup_now)(d);
        var nd = (0, src_1.get_mockup_now)();
        assert(d.toISOString() == nd.toISOString(), "Invalid value");
        (0, src_1.delay_mockup_now_by_day)(2);
        var v = (0, src_1.get_mockup_now)();
        assert(v.toISOString() == "2020-01-03T00:00:01.000Z", "Invalid value");
    });
    it('delay_mockup_now_by_week', function () {
        var d = new Date("2020-01-01T00:00:01.000Z");
        (0, src_1.set_mockup_now)(d);
        var nd = (0, src_1.get_mockup_now)();
        assert(d.toISOString() == nd.toISOString(), "Invalid value");
        (0, src_1.delay_mockup_now_by_week)(2);
        var v = (0, src_1.get_mockup_now)();
        assert(v.toISOString() == "2020-01-15T00:00:01.000Z", "Invalid value");
    });
    it('check on-chain now', function () { return __awaiter(void 0, void 0, void 0, function () {
        var d, alice, contract, nd, storage, onchain_date;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    d = new Date("2022-12-06T16:30:00.000Z");
                    (0, src_1.set_mockup_now)(d);
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/gnow.arl', {}, { as: alice })];
                case 1:
                    contract = _a.sent();
                    return [4 /*yield*/, (0, src_1.call)(contract.address, "exec", { prim: "Unit" }, { as: alice })];
                case 2:
                    _a.sent();
                    nd = (0, src_1.get_mockup_now)();
                    assert(d.toISOString() == nd.toISOString(), "Invalid value");
                    return [4 /*yield*/, Completium.getStorage(contract.address)];
                case 3:
                    storage = _a.sent();
                    onchain_date = new Date(storage);
                    assert(onchain_date.toISOString() == nd.toISOString(), "Invalid value");
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('Mockup chain_id', function () {
    it('expr_micheline_to_json', function () { return __awaiter(void 0, void 0, void 0, function () {
        var init_value, chainid, v;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, src_1.get_chain_id)()];
                case 1:
                    init_value = _a.sent();
                    chainid = new archetype_ts_types_1.Chain_id("NetXdQprcVkpaWU");
                    (0, src_1.set_mockup_chain_id)(chainid);
                    return [4 /*yield*/, (0, src_1.get_chain_id)()];
                case 2:
                    v = _a.sent();
                    assert(v.equals(chainid));
                    (0, src_1.set_mockup_chain_id)(init_value);
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('Utils', function () {
    it('expr_micheline_to_json', function () { return __awaiter(void 0, void 0, void 0, function () {
        var input, output;
        return __generator(this, function (_a) {
            input = '{ DROP }';
            output = (0, src_1.expr_micheline_to_json)(input);
            assert(JSON.stringify(output, null, 0) == '[{"prim":"DROP"}]');
            return [2 /*return*/];
        });
    }); });
    it('json_micheline_to_expr', function () { return __awaiter(void 0, void 0, void 0, function () {
        var input, output;
        return __generator(this, function (_a) {
            input = [{ "prim": "DROP" }];
            output = (0, src_1.json_micheline_to_expr)(input);
            assert(output == '{DROP}');
            return [2 /*return*/];
        });
    }); });
    // it('configure_experiment', async () => {
    //   await configure_experiment();
    //   // or
    //   await configure_experiment({
    //     account: 'alice',
    //     endpoint: 'mockup',
    //     quiet: true,
    //   });
    // })
    // it('mockup init', async () => {
    //   await mockup_init()
    //   // or
    //   await mockup_init({protocol: "PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW"})
    // })
});
describe('Events', function () {
    it('call', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res_deploy, res_call, event_first, event_second;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, src_1.set_endpoint)('mockup');
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/event_emit.arl', {}, { as: alice })];
                case 1:
                    res_deploy = _a.sent();
                    return [4 /*yield*/, (0, src_1.call)(res_deploy.address, "exec", { prim: "Unit" }, { as: alice })];
                case 2:
                    res_call = _a.sent();
                    assert(res_call.events.length == 2);
                    event_first = res_call.events[0];
                    assert(event_first.from.equals(new archetype_ts_types_1.Address(res_deploy.address)));
                    assert(JSON.stringify(event_first.type) == "{\"prim\":\"pair\",\"args\":[{\"prim\":\"nat\",\"annots\":[\"%a\"]},{\"prim\":\"string\",\"annots\":[\"%b\"]}]}");
                    assert(event_first.tag == "e_event");
                    assert(JSON.stringify(event_first.payload) == "{\"prim\":\"Pair\",\"args\":[{\"int\":\"0\"},{\"string\":\"toto\"}]}");
                    assert(event_first.consumed_gas == 100);
                    event_second = res_call.events[1];
                    assert(event_second.from.equals(new archetype_ts_types_1.Address(res_deploy.address)));
                    assert(JSON.stringify(event_second.type) == "{\"prim\":\"pair\",\"args\":[{\"prim\":\"nat\",\"annots\":[\"%a\"]},{\"prim\":\"string\",\"annots\":[\"%b\"]}]}");
                    assert(event_second.tag == "e_event");
                    assert(JSON.stringify(event_second.payload) == "{\"prim\":\"Pair\",\"args\":[{\"int\":\"2\"},{\"string\":\"titi\"}]}");
                    assert(event_second.consumed_gas == 100);
                    return [2 /*return*/];
            }
        });
    }); });
    it('batch', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res_deploy, param, params, res_call, i, event_first, event_second;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, src_1.set_endpoint)('mockup');
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.deploy)('./tests/contracts/event_emit.arl', {}, { as: alice })];
                case 1:
                    res_deploy = _a.sent();
                    return [4 /*yield*/, (0, src_1.get_call_param)(res_deploy.address, "exec", { prim: "Unit" }, { as: alice })];
                case 2:
                    param = _a.sent();
                    params = [param, param, param];
                    return [4 /*yield*/, (0, src_1.exec_batch)(params, { as: alice })];
                case 3:
                    res_call = _a.sent();
                    assert(res_call.events.length == 6);
                    for (i = 0; i < 2; ++i) {
                        event_first = res_call.events[i * 2 + 0];
                        assert(event_first.from.equals(new archetype_ts_types_1.Address(res_deploy.address)));
                        assert(JSON.stringify(event_first.type) == "{\"prim\":\"pair\",\"args\":[{\"prim\":\"nat\",\"annots\":[\"%a\"]},{\"prim\":\"string\",\"annots\":[\"%b\"]}]}");
                        assert(event_first.tag == "e_event");
                        assert(JSON.stringify(event_first.payload) == "{\"prim\":\"Pair\",\"args\":[{\"int\":\"0\"},{\"string\":\"toto\"}]}");
                        assert(event_first.consumed_gas == 100);
                        event_second = res_call.events[i * 2 + 1];
                        assert(event_second.from.equals(new archetype_ts_types_1.Address(res_deploy.address)));
                        assert(JSON.stringify(event_second.type) == "{\"prim\":\"pair\",\"args\":[{\"prim\":\"nat\",\"annots\":[\"%a\"]},{\"prim\":\"string\",\"annots\":[\"%b\"]}]}");
                        assert(event_second.tag == "e_event");
                        assert(JSON.stringify(event_second.payload) == "{\"prim\":\"Pair\",\"args\":[{\"int\":\"2\"},{\"string\":\"titi\"}]}");
                        assert(event_second.consumed_gas == 100);
                    }
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('Utils', function () {
    it('register_global_constant', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alice = (0, src_1.get_account)('alice');
                    return [4 /*yield*/, (0, src_1.register_global_constant)(new archetype_ts_types_1.Nat(3).to_mich(), { as: alice })];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    // it('get_mockup_level and mockup_bake', async () => {
    //   const delta = 5;
    //   const before_level = await get_mockup_level();
    //   for (var i = 0; i < delta; ++i) {
    //     await mockup_bake();
    //   }
    //   const after_level = await get_mockup_level();
    //   assert(parseInt(before_level) + delta ==  parseInt(after_level))
    // })
    it('get_sandbox_exec_address', function () { return __awaiter(void 0, void 0, void 0, function () {
        var addr, balance;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    addr = (0, src_1.get_sandbox_exec_address)();
                    return [4 /*yield*/, (0, src_1.get_balance)(addr)];
                case 1:
                    balance = _a.sent();
                    assert(balance.equals(new archetype_ts_types_1.Tez(0)));
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=main.spec.js.map
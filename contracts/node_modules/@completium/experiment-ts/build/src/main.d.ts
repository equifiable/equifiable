import * as att from '@completium/archetype-ts-types';
export declare class Account {
    name: string;
    pubk: string;
    pkh: string;
    sk: string;
    constructor(n: string, k: string, h: string, s: string);
    get_address: () => att.Address;
    get_public_key: () => att.Key;
    get_secret_key: () => string;
    get_name: () => string;
    get_balance: () => Promise<att.Tez>;
    sign: (value: att.Bytes) => Promise<att.Signature>;
}
export interface Parameters {
    as: Account;
    amount: att.Tez;
}
export declare const set_endpoint: (endpoint: string) => void;
export declare const get_endpoint: () => string;
export declare const set_mockup: () => void;
export declare const is_mockup: () => boolean;
export declare const set_quiet: (b: boolean) => void;
export declare const set_mockup_now: (d: Date) => void;
export declare const get_mockup_now: () => Date;
export declare const set_mockup_chain_id: (input: att.Chain_id) => void;
export declare const get_chain_id: () => Promise<att.Chain_id>;
export declare const delay_mockup_now_by_second: (v: number) => void;
export declare const delay_mockup_now_by_minute: (v: number) => void;
export declare const delay_mockup_now_by_hour: (v: number) => void;
export declare const delay_mockup_now_by_day: (v: number) => void;
export declare const delay_mockup_now_by_week: (v: number) => void;
export declare const get_account: (name: string) => Account;
export declare const pack: (obj: att.Micheline, typ?: att.MichelineType) => att.Bytes;
export declare const blake2b: (b: att.Bytes) => att.Bytes;
export declare const get_balance: (addr: att.Address) => Promise<att.Tez>;
/**
 * Expects f to fail with error
 * @param f async call to execute
 * @param error error that f is expected to thow
 */
export declare const expect_to_fail: (f: {
    (): Promise<void>;
}, error: att.Micheline) => Promise<void>;
/**
 * Returns value associated to key in big map
 * @param big_map_id big map identifier
 * @param key_value value of key
 * @param key_type type of key
 * @returns Micheline value associated to key
 */
export declare const get_big_map_value: (big_map_id: bigint, key_value: att.Micheline, key_type: att.MichelineType, value_type?: att.MichelineType) => Promise<any>;
export declare const sign: (b: att.Bytes, a: Account) => Promise<att.Signature>;
/**
 * Returns contract storage
 * @param c contract address
 * @returns storage record
 */
export declare const get_storage: (c: string) => Promise<any>;
/**
 * Returns contract storage
 * @param c contract address
 * @returns storage record
 */
export declare const get_raw_storage: (c: string) => Promise<att.Micheline>;
/**
 * Deploys contract
 * @param path (relative/absolute) path to archetype file (.arl)
 * @param params contract parameters
 * @param p deployment parameters (as, amout)
 * @returns address of deployed contract
 */
export declare const deploy: (path: string, params: any, p: Partial<Parameters>) => Promise<att.DeployResult>;
export declare const originate: (path: string, storage: att.Micheline, p: Partial<Parameters>) => Promise<att.OriginateResult>;
export declare const deploy_from_json: (name: string, code: any, storage: att.Micheline, p: Partial<Parameters>) => Promise<att.DeployResult>;
export declare const deploy_callback: (name: string, mt: att.MichelineType, p: Partial<Parameters>) => Promise<att.DeployResult>;
export declare const get_callback_value: <T extends att.ArchetypeTypeArg>(callback_addr: string, mich_to: (_: any) => T) => Promise<T>;
/**
 * Calls a contract entrypoint
 * @param c contract address
 * @param e entry point name
 * @param a entry point argument
 * @param p parameters (as, amount)
 */
export declare const call: (c: string, e: string, a: att.Micheline, p: Partial<Parameters>) => Promise<att.CallResult>;
export declare const get_call_param: (c: string, e: string, a: att.Micheline, p: Partial<Parameters>) => Promise<att.CallParameter>;
export declare const exec_batch: (cps: att.CallParameter[], p: Partial<Parameters>) => Promise<att.BatchResult>;
export declare const exec_getter: (contract: att.Address, entry: string, arg: att.Micheline, param: Partial<Parameters>) => Promise<att.GetterResult>;
export declare const exec_view: (contract: att.Address, view: string, arg: att.Micheline, param: Partial<Parameters>) => Promise<att.ViewResult>;
/**
 * Transfers tez
 * @param from account to transfer from
 * @param to   account or address to transfer to
 * @param amount amount to transfer in mutez
 * @returns
 */
export declare const transfer: (from: Account, to: Account | string, amount: bigint) => Promise<att.TransferResult>;
export declare const expr_micheline_to_json: (input: string) => att.Micheline;
export declare const json_micheline_to_expr: (input: att.Micheline) => string;
export interface RegisterGlobalConstantResult {
    status: "passed" | "error";
    global_address: string | undefined;
    stderr: string;
    stdout: string;
}
export declare const register_global_constant: (input: att.Micheline, param: Partial<Parameters>) => Promise<RegisterGlobalConstantResult>;
export declare const get_mockup_level: () => Promise<string>;
export declare const mockup_bake: () => Promise<any>;
export interface MockupInitParameters {
    protocol?: string;
}
export declare const mockup_init: (parameters?: MockupInitParameters) => Promise<void>;
export interface ConfigureExperimentParameters {
    account?: string;
    endpoint?: string;
    quiet?: boolean;
}
export declare const configure_experiment: (parameters?: ConfigureExperimentParameters) => Promise<void>;
export declare const get_sandbox_exec_address: () => att.Address;
//# sourceMappingURL=main.d.ts.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate_binding = exports.Language = exports.Target = void 0;
const typescript_1 = __importStar(require("typescript"));
const utils_1 = require("./utils");
const file = (0, typescript_1.createSourceFile)("source.ts", "", typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
const printer = (0, typescript_1.createPrinter)({ newLine: typescript_1.NewLineKind.LineFeed });
// https://ts-ast-viewer.com/#
const make_mich_to_entity_decl = (name, body) => {
    return typescript_1.factory.createVariableStatement([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("mich_to_" + name), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("v"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined), undefined),
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("collapsed"), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.BooleanKeyword), typescript_1.factory.createFalse())], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(name), undefined), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock(body, true)))], typescript_1.default.NodeFlags.Const));
};
const fields_to_mich_to_entity_decl = (name, fields, ci) => {
    return make_mich_to_entity_decl(name, [
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("fields"), undefined, typescript_1.factory.createArrayTypeNode(typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined)), typescript_1.factory.createArrayLiteralExpression([], false))], typescript_1.default.NodeFlags.Let)),
        typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier("collapsed"), typescript_1.factory.createBlock([typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier("fields"), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("mich_to_pairs")), undefined, [typescript_1.factory.createIdentifier("v")])))], true), typescript_1.factory.createBlock([typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier("fields"), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("annotated_mich_to_array")), undefined, [
                typescript_1.factory.createIdentifier("v"),
                typescript_1.factory.createIdentifier(name + "_mich_type")
            ])))], true)),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier(name), undefined, fields.map((x, i) => {
            return (0, utils_1.mich_to_archetype_type)(x.type, typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier("fields"), typescript_1.factory.createIdentifier(i.toString())), ci);
        })))
    ]);
};
const field_to_cmp_body = (field, arg_a, arg_b, ci) => {
    const a = typescript_1.factory.createPropertyAccessExpression(arg_a, typescript_1.factory.createIdentifier(field.name));
    const b = typescript_1.factory.createPropertyAccessExpression(arg_b, typescript_1.factory.createIdentifier(field.name));
    return (0, utils_1.make_cmp_body)(a, b, field.type, ci);
};
const entity_to_mich_type_decl = (name, mt) => {
    return typescript_1.factory.createVariableStatement([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(name), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("MichelineType")), undefined), (0, utils_1.value_to_mich_type)(mt))], typescript_1.default.NodeFlags.Const));
};
const assetKeyToMichTypeDecl = (a) => entity_to_mich_type_decl(a.name + "_key_mich_type", a.key_type_michelson);
const assetValueToMichTypeDecl = (a) => entity_to_mich_type_decl(a.name + "_value_mich_type", a.value_type_michelson);
const assetContainerToMichTypeDecl = (a) => entity_to_mich_type_decl(a.name + "_container_mich_type", a.container_type_michelson);
const recordToMichTypeDecl = (r) => entity_to_mich_type_decl(r.name + "_mich_type", r.type_michelson);
const generate_storage_utils = (ci) => {
    var _a, _b;
    if (((_a = ci.storage_type) === null || _a === void 0 ? void 0 : _a.value) == undefined)
        return [];
    return [
        // generate storage michelson type
        entity_to_mich_type_decl("storage_mich_stype", (_b = ci.storage_type) === null || _b === void 0 ? void 0 : _b.value),
        // generate storage literal maker
        entity_to_mich_decl("storage", ci.storage, (0, utils_1.storage_to_mich)(ci.storage_type.value, ci.storage, ci), ci)
    ];
};
const entity_to_mich_decl = (name, args, body, ci) => {
    return typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(name + "_arg_to_mich"), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, args.map(x => contractParameterToParamDecl(x, ci)), typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(body)], true)))], typescript_1.default.NodeFlags.Const);
};
const entryToArgToMichDecl = (e, ci) => {
    return entity_to_mich_decl(e.name, e.args, (0, utils_1.function_params_to_mich)(e.args, ci), ci);
};
const compute_arg = (root, name, ty) => {
    const a = name.charAt(0) == '%' ? name : "%" + name;
    const path = (0, utils_1.get_path)(a, ty);
    const res = path.reduce((acc, pi) => {
        const expr_arg = typescript_1.factory.createAsExpression(acc, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Mpair")), undefined));
        return (0, utils_1.make_arg)(expr_arg, pi);
    }, root);
    return res;
};
const mich_to_record_body = (name, fields, mty, arg, ci) => {
    const extract_id = (mty) => {
        let accu = [];
        const f = (mty) => {
            var _a;
            if (((_a = mty.annots) === null || _a === void 0 ? void 0 : _a.length) == 1) {
                accu.push(mty.annots[0]);
            }
            else if (mty.prim == "pair") {
                mty.args.forEach(f);
            }
        };
        f(mty);
        return accu;
    };
    let args = [];
    let ids = fields.map(x => x.name);
    const new_ids = extract_id(mty);
    if (ids.length == new_ids.length) {
        ids = new_ids;
    }
    for (let i = 0; i < fields.length; ++i) {
        const field = fields[i];
        const a = compute_arg(arg, ids[i], mty);
        const b = (0, utils_1.mich_to_archetype_type)(field.type, a, ci);
        args.push(b);
    }
    const ret = typescript_1.factory.createReturnStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier(name), undefined, args));
    return [ret];
};
const entityToInterfaceDecl = (name, mt, fields, mich_body, ci) => {
    return typescript_1.factory.createClassDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createIdentifier(name), undefined, [typescript_1.factory.createHeritageClause(typescript_1.default.SyntaxKind.ImplementsKeyword, [typescript_1.factory.createExpressionWithTypeArguments(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("ArchetypeType")), undefined)])], [
        typescript_1.factory.createConstructorDeclaration(undefined, undefined, fields.map(x => contractParameterToParamDecl(x, ci, true)), typescript_1.factory.createBlock([], false)),
        (0, utils_1.make_to_string_decl)(),
        typescript_1.factory.createMethodDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("to_mich"), undefined, undefined, [], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(((0, utils_1.entity_to_mich)(fields.length == 1 ? "this." + fields[0].name : "this", mt, fields, 0, ci))[1])], true)),
        typescript_1.factory.createMethodDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("equals"), undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("v"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(name), undefined), undefined)], typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.BooleanKeyword), typescript_1.factory.createBlock(fields.length > 1 ?
            [typescript_1.factory.createReturnStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("micheline_equals")), undefined, [
                    typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("to_mich")), undefined, []),
                    typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("v"), typescript_1.factory.createIdentifier("to_mich")), undefined, [])
                ]))] :
            (fields.length == 1 ?
                [typescript_1.factory.createReturnStatement(field_to_cmp_body(fields[0], typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("v"), ci))] :
                [typescript_1.factory.createReturnStatement(typescript_1.factory.createTrue())]), true)),
        typescript_1.factory.createMethodDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.StaticKeyword)], undefined, typescript_1.factory.createIdentifier("from_mich"), undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("input"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined), undefined)], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(name), undefined), typescript_1.factory.createBlock(mich_body, true))
    ]);
};
const assetKeyToInterfaceDecl = (a, ci) => {
    const name = a.name + "_key";
    const mty = a.key_type_michelson;
    const fields = a.fields.filter(x => x.is_key);
    const mich_body = mich_to_record_body(name, fields, mty, typescript_1.factory.createIdentifier("input"), ci);
    return fields.length == 1 ? [] : [entityToInterfaceDecl(name, mty, fields, mich_body, ci)];
};
const assetValueToInterfaceDecl = (a, ci) => {
    const name = a.name + "_value";
    const mty = a.value_type_michelson;
    const fields = a.fields.filter(x => !x.is_key);
    const mich_body = mich_to_record_body(name, fields, mty, typescript_1.factory.createIdentifier("input"), ci);
    return fields.length == 1 ? [] : [entityToInterfaceDecl(name, mty, fields, mich_body, ci)];
};
const recordToInterfaceDecl = (r, ci) => {
    const mty = r.type_michelson;
    const mich_body = mich_to_record_body(r.name, r.fields, mty, typescript_1.factory.createIdentifier("input"), ci);
    return [entityToInterfaceDecl(r.name, mty, r.fields, mich_body, ci)];
};
const assetContainerToTypeDecl = (a, ci) => {
    const ts_key_type = (0, utils_1.archetype_type_to_ts_type)({ node: "asset_key", name: a.name }, ci);
    const ts_val_type = (0, utils_1.archetype_type_to_ts_type)({ node: "asset_value", name: a.name }, ci);
    return typescript_1.factory.createTypeAliasDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.SyntaxKind.ExportKeyword)], typescript_1.factory.createIdentifier(a.name + "_container"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Array"), [not_a_set(a) ?
            typescript_1.factory.createTupleTypeNode([
                ts_key_type,
                ts_val_type
            ]) :
            ts_key_type
    ]));
};
const contractParameterToParamDecl = (fp, ci, pub = false) => {
    return typescript_1.factory.createParameterDeclaration(undefined, pub ? [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.PublicKeyword)] : [], undefined, typescript_1.factory.createIdentifier(fp.name), undefined, (0, utils_1.archetype_type_to_ts_type)(fp.type, ci), undefined);
};
const entry_to_method = (name, args, ret, body, ret_undefined, ci) => {
    return typescript_1.factory.createMethodDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.SyntaxKind.AsyncKeyword)], undefined, typescript_1.factory.createIdentifier(name), undefined, undefined, args.map(x => contractParameterToParamDecl(x, ci)).concat([
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("params"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Partial"), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("Parameters")), undefined)]), undefined)
    ]), typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Promise"), [ret_undefined ? typescript_1.factory.createUnionTypeNode([ret, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.UndefinedKeyword)]) : ret]), typescript_1.factory.createBlock([typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address")), typescript_1.factory.createToken(typescript_1.SyntaxKind.ExclamationEqualsToken), typescript_1.factory.createIdentifier("undefined")), typescript_1.factory.createBlock(body, true), undefined),
        typescript_1.factory.createThrowStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier("Error"), undefined, [typescript_1.factory.createStringLiteral("Contract not initialised")]))], true));
};
const entryToMethod = (e, ci) => {
    return entry_to_method(e.name, e.args, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("CallResult")), undefined), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("call")), undefined, [
            typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address")),
            typescript_1.factory.createStringLiteral(e.name),
            typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(e.name + "_arg_to_mich"), undefined, e.args.map(x => x.name).map(x => typescript_1.factory.createIdentifier(x))),
            typescript_1.factory.createIdentifier("params")
        ])))
    ], false, ci);
};
const entryToGetParam = (e, ci) => {
    return entry_to_method("get_" + e.name + "_param", e.args, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("CallParameter")), undefined), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("get_call_param")), undefined, [
            typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address")),
            typescript_1.factory.createStringLiteral(e.name),
            typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(e.name + "_arg_to_mich"), undefined, e.args.map(x => x.name).map(x => typescript_1.factory.createIdentifier(x))),
            typescript_1.factory.createIdentifier("params")
        ])))
    ], false, ci);
};
const getter_to_method = (g, ci) => {
    return entry_to_method(g.name, g.args, (0, utils_1.archetype_type_to_ts_type)(g.return, ci), [
        typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier(g.name + "_callback_address")), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsToken), typescript_1.factory.createIdentifier("undefined")), typescript_1.factory.createBlock([
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("entrypoint"), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Entrypoint")), undefined, [
                    typescript_1.factory.createNewExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Address")), undefined, [typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier(g.name + "_callback_address"))]),
                    typescript_1.factory.createStringLiteral("callback")
                ]))], typescript_1.default.NodeFlags.Const)),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("call")), undefined, [
                typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address")),
                typescript_1.factory.createStringLiteral(g.name),
                typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("getter_args_to_mich")), undefined, [
                    typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(g.name + "_arg_to_mich"), undefined, g.args.map(x => x.name).map(x => typescript_1.factory.createIdentifier(x))),
                    typescript_1.factory.createIdentifier("entrypoint")
                ]),
                typescript_1.factory.createIdentifier("params")
            ]))),
            typescript_1.factory.createReturnStatement(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("get_callback_value")), [(0, utils_1.archetype_type_to_ts_type)(g.return, ci)], [
                typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier(g.name + "_callback_address")),
                typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("x"), undefined, undefined, undefined)], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement((0, utils_1.mich_to_archetype_type)(g.return, typescript_1.factory.createIdentifier("x"), ci))]))
            ])))
        ], true), undefined)
    ], false, ci);
};
const view_to_method = (v, ci) => {
    return entry_to_method("view_" + v.name, v.args, (0, utils_1.archetype_type_to_ts_type)(v.return, ci), [...[typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("mich"), undefined, undefined, typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("exec_view")), undefined, [
                    typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("get_address")), undefined, []),
                    typescript_1.factory.createStringLiteral(v.name),
                    typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("view_" + v.name + "_arg_to_mich"), undefined, v.args.map(x => x.name).map(x => typescript_1.factory.createIdentifier(x))),
                    typescript_1.factory.createIdentifier("params")
                ])))], typescript_1.default.NodeFlags.Const))],
        ...([typescript_1.factory.createReturnStatement(typescript_1.factory.createConditionalExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("mich"), typescript_1.factory.createIdentifier("value")), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), (0, utils_1.mich_to_archetype_type)(v.return, typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("mich"), typescript_1.factory.createIdentifier("value")), ci), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier("undefined")))])
    ], true, ci);
};
const make_method_skeleton = (is_async, name, args, return_type, with_storage, body) => {
    return typescript_1.factory.createMethodDeclaration(undefined, is_async ? [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.AsyncKeyword)] : [], undefined, typescript_1.factory.createIdentifier(name), undefined, undefined, args, return_type, typescript_1.factory.createBlock([
        typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address")), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsToken), typescript_1.factory.createIdentifier("undefined")), typescript_1.factory.createBlock(([
            ...(with_storage ? [typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("storage"), undefined, undefined, typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("get_raw_storage")), undefined, [typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address"))])))], typescript_1.default.NodeFlags.Const | typescript_1.default.NodeFlags.AwaitContext | typescript_1.default.NodeFlags.ContextFlags | typescript_1.default.NodeFlags.TypeExcludesFlags))] : []),
            ...(body)
        ]), true), undefined),
        typescript_1.factory.createThrowStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier("Error"), undefined, [typescript_1.factory.createStringLiteral("Contract not initialised")]))
    ], true));
};
const storage_elt_to_getter_skeleton = (prefix, elt_name, args, return_type, body) => {
    return make_method_skeleton(true, prefix + elt_name, args, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Promise"), [return_type]), true, body);
};
const get_data_storage_elt = (selt, ci) => {
    const root = typescript_1.factory.createIdentifier("storage");
    const name = selt.name;
    const ty = ci.storage_type.value;
    return compute_arg(root, name, ty);
};
const storage_elt_to_class = (selt, ci) => {
    const elt = get_data_storage_elt(selt, ci);
    return storage_elt_to_getter_skeleton("get_", selt.name, [], (0, utils_1.archetype_type_to_ts_type)(selt.type, ci), [typescript_1.factory.createReturnStatement((0, utils_1.mich_to_archetype_type)(selt.type, elt, ci))]);
};
const eventToRegister = (e, ci) => {
    return make_method_skeleton(false, // not async
    "register_" + e.name, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("ep"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("el"), typescript_1.factory.createIdentifier("EventProcessor")), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(e.name), undefined)]), undefined)], undefined, // returns void
    false, // don't need storage
    [typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("el"), typescript_1.factory.createIdentifier("registerEvent")), undefined, [typescript_1.factory.createObjectLiteralExpression([
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier("source"), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address"))),
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier("filter"), typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("tag"), undefined, undefined, undefined)], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier("tag"), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsToken), typescript_1.factory.createStringLiteral(e.name)))], false))),
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier("process"), typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("raw"), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined),
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("data"), undefined, typescript_1.factory.createUnionTypeNode([
                        typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("el"), typescript_1.factory.createIdentifier("EventData")), undefined),
                        typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.UndefinedKeyword)
                    ]), undefined)
                ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("event"), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("x"), undefined, undefined, undefined)], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement((0, utils_1.mich_to_archetype_type)({ node: "event", name: e.name }, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAsExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("normalize")), undefined, [typescript_1.factory.createIdentifier("x")]), typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined))), ci))], true))), undefined, [typescript_1.factory.createIdentifier("raw")]))], typescript_1.default.NodeFlags.Const)),
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("ep"), undefined, [
                        typescript_1.factory.createIdentifier("event"),
                        typescript_1.factory.createIdentifier("data")
                    ]))
                ], true)))
            ], false)])), typescript_1.factory.createReturnStatement(undefined)]);
};
const get_n = (expr, n) => {
    return typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createAsExpression(expr, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Mpair")), undefined)), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier("args")), typescript_1.factory.createNumericLiteral(n));
};
const get_big_map_value_getter_body = (name, key_type, key_mich_type, value_mich_type, selt, return_statement_found, ret_value_not_found, is_iterable_big_map, ci) => {
    const aa = typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("get_big_map_value")), undefined, [
        typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("BigInt"), undefined, [
            typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(selt, typescript_1.factory.createIdentifier("toString")), undefined, [])
        ]),
        (0, utils_1.function_param_to_mich)({ name: "key", type: key_type }, ci),
        key_mich_type
    ]));
    let aaa = [];
    if (is_iterable_big_map) {
        const size = (0, utils_1.get_size_michelson_type)(value_mich_type);
        const pi = size == 1 ? [1] : [1, size + 1];
        const aaaa = (0, utils_1.make_arg)(typescript_1.factory.createIdentifier("raw_data"), pi, true);
        aaa = [
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("raw_data"), undefined, undefined, aa)], typescript_1.default.NodeFlags.Const | typescript_1.default.NodeFlags.AwaitContext | typescript_1.default.NodeFlags.ContextFlags | typescript_1.default.NodeFlags.TypeExcludesFlags)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("data"), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier("raw_data"), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), aaaa, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier("undefined")))], typescript_1.default.NodeFlags.Const | typescript_1.default.NodeFlags.AwaitContext | typescript_1.default.NodeFlags.ContextFlags | typescript_1.default.NodeFlags.TypeExcludesFlags))
        ];
    }
    else {
        aaa = [typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("data"), undefined, undefined, aa)], typescript_1.default.NodeFlags.Const | typescript_1.default.NodeFlags.AwaitContext | typescript_1.default.NodeFlags.ContextFlags | typescript_1.default.NodeFlags.TypeExcludesFlags))];
    }
    return (aaa.concat([
        typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier("data"), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsToken), typescript_1.factory.createIdentifier("undefined")), typescript_1.factory.createBlock(return_statement_found, true), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(ret_value_not_found)], true))
    ]));
};
const mich_to_int = (arg) => {
    return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Int")), typescript_1.factory.createIdentifier("from_mich")), undefined, [arg]);
};
const storageToGetters = (selt, ci) => {
    switch (selt.type.node) {
        // special treatment
        case "big_map":
        case "iterable_big_map": {
            const is_iterable_big_map = selt.type.node == "iterable_big_map";
            const v_data = get_data_storage_elt(selt, ci);
            const values_map = is_iterable_big_map ? get_n(v_data, 0) : v_data;
            return [
                storage_elt_to_getter_skeleton("get_", selt.name + "_value", [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("key"), undefined, (0, utils_1.archetype_type_to_ts_type)(selt.type.key_type, ci), undefined)], typescript_1.factory.createUnionTypeNode([
                    (0, utils_1.archetype_type_to_ts_type)(selt.type.value_type, ci),
                    typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.UndefinedKeyword)
                ]), get_big_map_value_getter_body(selt.name, selt.type.key_type, (0, utils_1.value_to_mich_type)((0, utils_1.archetype_type_to_mich_type)(selt.type.key_type, ci)), (0, utils_1.archetype_type_to_mich_type)(selt.type.value_type, ci), 
                /* TODO: handle above when record, asset_value, enum, ...
                  these types already have a michelson_type variable created for that purpose
                */
                mich_to_int(values_map), [typescript_1.factory.createReturnStatement((0, utils_1.mich_to_archetype_type)(selt.type.value_type, typescript_1.factory.createIdentifier("data"), ci))], typescript_1.factory.createIdentifier("undefined"), is_iterable_big_map, ci)),
                storage_elt_to_getter_skeleton("has_", selt.name + "_value", [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("key"), undefined, (0, utils_1.archetype_type_to_ts_type)(selt.type.key_type, ci), undefined)], typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.BooleanKeyword), get_big_map_value_getter_body(selt.name, selt.type.key_type, (0, utils_1.value_to_mich_type)((0, utils_1.archetype_type_to_mich_type)(selt.type.key_type, ci)), (0, utils_1.archetype_type_to_mich_type)(selt.type.value_type, ci), 
                /* TODO: handle above when record, asset_value, enum, ...
                  these types already have a michelson_type variable created for that purpose
                */
                mich_to_int(values_map), [typescript_1.factory.createReturnStatement(typescript_1.factory.createTrue())], typescript_1.factory.createFalse(), false, ci))
            ];
        }
        case "asset": { // Special treatment for big map assets
            const assetType = ci.types.assets.find(x => x.name == selt.name);
            if (assetType != undefined && (assetType.container_kind == "big_map" || assetType.container_kind == "iterable_big_map")) {
                const is_iterable_big_map = assetType.container_kind == "iterable_big_map";
                const v_data = get_data_storage_elt(selt, ci);
                const values_map = is_iterable_big_map ? get_n(v_data, 0) : v_data;
                return [storage_elt_to_getter_skeleton("get_", selt.name + "_value", [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("key"), undefined, (0, utils_1.archetype_type_to_ts_type)({ node: "asset_key", name: selt.name }, ci), undefined)], typescript_1.factory.createUnionTypeNode([
                        (0, utils_1.archetype_type_to_ts_type)({ node: "asset_value", name: selt.name }, ci),
                        typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.UndefinedKeyword)
                    ]), get_big_map_value_getter_body(selt.name, get_asset_key_archetype_type(selt.type, ci), typescript_1.factory.createIdentifier(selt.name + "_key_mich_type"), (0, utils_1.archetype_type_to_mich_type)({ node: "asset_value", name: selt.name }, ci), mich_to_int(values_map), [typescript_1.factory.createReturnStatement((0, utils_1.mich_to_archetype_type)({ node: "asset_value", name: selt.name }, typescript_1.factory.createIdentifier("data"), ci))], typescript_1.factory.createIdentifier("undefined"), is_iterable_big_map, ci)),
                    storage_elt_to_getter_skeleton("has_", selt.name + "_value", [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("key"), undefined, (0, utils_1.archetype_type_to_ts_type)({ node: "asset_key", name: selt.name }, ci), undefined)], typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.BooleanKeyword), get_big_map_value_getter_body(selt.name, get_asset_key_archetype_type(selt.type, ci), typescript_1.factory.createIdentifier(selt.name + "_key_mich_type"), (0, utils_1.archetype_type_to_mich_type)({ node: "asset_value", name: selt.name }, ci), mich_to_int(values_map), [typescript_1.factory.createReturnStatement(typescript_1.factory.createTrue())], typescript_1.factory.createFalse(), is_iterable_big_map, ci))
                ];
            }
        }
    }
    return storage_elt_to_class(selt, ci);
};
const decl_callback_deploy = (g) => {
    return typescript_1.factory.createVariableStatement([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("deploy_" + g.name + "_callback"), undefined, undefined, typescript_1.factory.createArrowFunction([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.AsyncKeyword)], undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("params"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Partial"), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("Parameters")), undefined)]), undefined)], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Promise"), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("DeployResult")), undefined)]), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("deploy_callback")), undefined, [
                typescript_1.factory.createStringLiteral(g.name),
                (0, utils_1.value_to_mich_type)(g.return_michelson.value),
                typescript_1.factory.createIdentifier("params"),
            ])))], true)))], typescript_1.default.NodeFlags.Const));
};
const get_addr_decl = (name) => {
    return typescript_1.factory.createPropertyDeclaration(undefined, undefined, typescript_1.factory.createIdentifier(name), undefined, typescript_1.factory.createUnionTypeNode([
        typescript_1.factory.createKeywordTypeNode(typescript_1.SyntaxKind.StringKeyword),
        typescript_1.factory.createKeywordTypeNode(typescript_1.SyntaxKind.UndefinedKeyword)
    ]), undefined);
};
const get_addr_assignement = (name) => {
    return typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier(name + "_callback_address")), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("deploy_" + name + "_callback"), undefined, [typescript_1.factory.createIdentifier("params")]))), typescript_1.factory.createIdentifier("address"))));
};
const get_asset_key_archetype_type = (a, ci) => {
    const assetType = ci.types.assets.find(x => x.name == a.name);
    if (assetType != undefined) {
        const fields = assetType.fields.filter(x => x.is_key);
        if (fields.length == 1) {
            return fields[0].type;
        }
        else {
            return { node: "record", name: assetType.name + "_key" };
        }
    }
    throw new Error("get_asset_key_archetype_type: asset " + (a.name ? a.name : "null") + " not found");
};
const storage_elt_to_param = (selt) => {
    return {
        name: selt.name,
        type: selt.type,
        const: false,
        default: null
    };
};
const language_to_deploy_name = (l) => {
    switch (l) {
        case (Language.Archetype): return "deploy";
        case (Language.Michelson): return "originate";
    }
};
const language_to_extension = (l) => {
    switch (l) {
        case (Language.Archetype): return ".arl";
        case (Language.Michelson): return ".tz";
    }
};
const language_to_storage_literal = (ci, l) => {
    switch (l) {
        case (Language.Archetype): return typescript_1.factory.createObjectLiteralExpression(ci.parameters.map(x => typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(x.name), (0, utils_1.function_param_to_mich)({ name: x.name, type: x.type }, ci))), true);
        case (Language.Michelson): return typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("storage_arg_to_mich"), undefined, ci.storage.map(x => typescript_1.factory.createIdentifier(x.name)));
    }
};
const gen_deploy = (ci, settings) => {
    switch (settings.target) {
        case (Target.Experiment): {
            const res = get_deploy(ci, settings);
            return [res];
        }
        case (Target.Dapp): {
            if (settings.with_dapp_originate) {
                const res = get_dapp_originate(ci, settings);
                return [res];
            }
            else {
                return [];
            }
        }
    }
};
const get_dapp_originate = (ci, settings) => {
    const mich_code = settings.mich_code;
    const mich_storage = settings.mich_storage;
    if (!mich_code) {
        throw ('Error: mich_code is required');
    }
    if (!mich_storage) {
        throw ('Error: mich_storage is required');
    }
    const params = settings.language == Language.Archetype ? ci.parameters : ci.storage.map(storage_elt_to_param);
    return typescript_1.factory.createMethodDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.SyntaxKind.AsyncKeyword)], undefined, typescript_1.factory.createIdentifier("originate"), undefined, undefined, params.map(x => contractParameterToParamDecl(x, ci)).concat([
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("params"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Partial"), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("Parameters")), undefined)]), undefined)
    ]), typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Promise"), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("DeployResult")), undefined)]), typescript_1.factory.createBlock([
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("raw_code"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("UnsafeMicheline")), undefined), (0, utils_1.to_literal)(mich_code))], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("raw_storage"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("UnsafeMicheline")), undefined), (0, utils_1.to_literal)(mich_storage))], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("dico"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Array"), [typescript_1.factory.createTupleTypeNode([
                    typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword),
                    typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined)
                ])]), typescript_1.factory.createArrayLiteralExpression(ci.parameters.map(x => {
                const mich_value = (0, utils_1.function_param_to_mich)({ name: x.name, type: x.type }, ci);
                return typescript_1.factory.createArrayLiteralExpression([
                    typescript_1.factory.createStringLiteral(x.name),
                    mich_value
                ], false);
            }), false))], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("code"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("replace_var")), undefined, [
                typescript_1.factory.createIdentifier("raw_code"),
                typescript_1.factory.createIdentifier("dico")
            ]))], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("storage"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("replace_var")), undefined, [
                typescript_1.factory.createIdentifier("raw_storage"),
                typescript_1.factory.createIdentifier("dico")
            ]))], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("originate")), undefined, [
            typescript_1.factory.createIdentifier("code"),
            typescript_1.factory.createIdentifier("storage"),
            typescript_1.factory.createIdentifier("params")
        ]))))
    ], true));
};
const get_deploy = (ci, settings) => {
    const name = language_to_deploy_name(settings.language);
    const params = settings.language == Language.Archetype ? ci.parameters : ci.storage.map(storage_elt_to_param);
    const extension = language_to_extension(settings.language);
    const storage = language_to_storage_literal(ci, settings.language);
    return typescript_1.factory.createMethodDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.SyntaxKind.AsyncKeyword)], undefined, typescript_1.factory.createIdentifier(name), undefined, undefined, params.map(x => contractParameterToParamDecl(x, ci)).concat([
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("params"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Partial"), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("Parameters")), undefined)]), undefined)
    ]), undefined, typescript_1.factory.createBlock([
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("address"), undefined, undefined, typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier(name)), undefined, [
                typescript_1.factory.createStringLiteral(settings.path + ci.name + extension),
                storage,
                typescript_1.factory.createIdentifier("params")
            ]))), typescript_1.factory.createIdentifier("address")))], typescript_1.NodeFlags.Const | typescript_1.NodeFlags.AwaitContext | typescript_1.NodeFlags.ContextFlags | typescript_1.NodeFlags.TypeExcludesFlags)),
        typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address")), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), typescript_1.factory.createIdentifier("address")))
    ].concat(ci.getters.map(x => get_addr_assignement(x.name))), true));
};
const get_contract_class_node = (ci, settings) => {
    return typescript_1.factory.createClassDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.SyntaxKind.ExportKeyword)], typescript_1.factory.createIdentifier(ci.name.charAt(0).toUpperCase() + ci.name.slice(1)), undefined, undefined, [
        ...([get_addr_decl("address")]),
        ...([(0, utils_1.get_constructor)()]),
        ...(ci.getters.map(x => get_addr_decl(x.name + "_callback_address"))),
        ...([
            (0, utils_1.get_get_address_decl)(),
            (0, utils_1.get_get_balance_decl)()
        ]),
        ...(gen_deploy(ci, settings)),
        ...(ci.entrypoints.map(x => entryToMethod(x, ci))),
        ...(ci.entrypoints.map(x => entryToGetParam(x, ci))),
        ...(ci.getters.map(x => getter_to_method(x, ci))),
        ...(ci.views.map(x => view_to_method(x, ci))),
        ...(ci.parameters.filter(x => !x.const).reduce((acc, x) => acc.concat(storageToGetters(x, ci)), [])),
        ...(ci.storage.filter(x => !x.const && x.name != "_state").reduce((acc, x) => acc.concat(storageToGetters(x, ci)), [])),
        ...(ci.types.enums.filter(x => x.name == "state").map(x => getStateDecl(x, ci))),
        ...(ci.types.events.reduce((acc, x) => acc.concat(eventToRegister(x, ci)), [])),
        ...([errors_to_decl(ci)])
    ]);
};
const get_import = (namespace, name) => {
    return typescript_1.factory.createImportDeclaration(undefined, undefined, typescript_1.factory.createImportClause(false, undefined, typescript_1.factory.createNamespaceImport(typescript_1.factory.createIdentifier(namespace))), typescript_1.factory.createStringLiteral(name), undefined);
};
const get_execution_import = (target) => {
    switch (target) {
        case Target.Dapp: return "@completium/dapp-ts";
        case Target.Experiment: return "@completium/experiment-ts";
    }
};
const get_imports = (ci, settings) => {
    return [
        get_import("ex", get_execution_import(settings.target)),
        get_import("att", "@completium/archetype-ts-types"),
    ].concat(ci.types.events.length > 0 ? [get_import("el", "@completium/event-listener")] : []);
};
const get_contract_decl = (ci) => {
    return typescript_1.factory.createVariableStatement([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(ci.name), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier(ci.name.charAt(0).toUpperCase() + ci.name.slice(1)), undefined, []))], typescript_1.default.NodeFlags.Const));
};
const make_enum_type_decl = (e) => {
    return typescript_1.factory.createEnumDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createIdentifier(e.name + "_types"), e.constructors.map(c => {
        return typescript_1.factory.createEnumMember(typescript_1.factory.createIdentifier(c.name), typescript_1.factory.createStringLiteral(c.name));
    }));
};
const make_enum_class_decl = (e) => {
    return typescript_1.factory.createClassDeclaration(undefined, [
        typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword),
        typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.AbstractKeyword)
    ], typescript_1.factory.createIdentifier(e.name), undefined, [typescript_1.factory.createHeritageClause(typescript_1.default.SyntaxKind.ExtendsKeyword, [typescript_1.factory.createExpressionWithTypeArguments(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Enum")), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(e.name + "_types"), undefined)])])], [
        typescript_1.factory.createMethodDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.AbstractKeyword)], undefined, typescript_1.factory.createIdentifier("to_mich"), undefined, undefined, [], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined), undefined),
        typescript_1.factory.createMethodDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("equals"), undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("v"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(e.name), undefined), undefined)], typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.BooleanKeyword), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("micheline_equals")), undefined, [
                typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("to_mich")), undefined, []),
                typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("v"), typescript_1.factory.createIdentifier("to_mich")), undefined, [])
            ]))], true))
    ]);
};
const make_enum_type_to_mich_return_stt = (e, c, idx, ci) => {
    let mich_value = typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("unit_mich"));
    if (c.types.length > 0) {
        let atype = {
            node: "unit"
        };
        if (c.types.length > 1) {
            atype = {
                node: "tuple",
                args: c.types
            };
        }
        else {
            atype = c.types[0];
        }
        const param = {
            name: "this.content",
            type: atype
        };
        mich_value = (0, utils_1.function_param_to_mich)(param, ci);
    }
    const e_path = (0, utils_1.compute_path_enum)(idx, e.constructors.length);
    const res = e_path.reverse().reduce((accu, x) => {
        return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier(x == utils_1.e_left_right.Left ? "left_to_mich" : "right_to_mich")), undefined, [accu]);
    }, mich_value);
    return res;
};
const make_simple_enum_type_to_mich_return_stt = (idx) => {
    return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createNewExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Int")), undefined, [typescript_1.factory.createIdentifier(idx.toString())]), typescript_1.factory.createIdentifier("to_mich")), undefined, []);
};
const make_enum_type_class_decl = (e, c, idx, complex, ci) => {
    let args = [];
    if (c.types.length > 0) {
        let atype = c.types[0];
        if (c.types.length > 1) {
            atype = {
                node: "tuple",
                args: c.types
            };
        }
        args = [typescript_1.factory.createParameterDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.PrivateKeyword)], undefined, typescript_1.factory.createIdentifier("content"), undefined, (0, utils_1.archetype_type_to_ts_type)(atype, ci), undefined)];
    }
    return typescript_1.factory.createClassDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createIdentifier(c.name), undefined, [typescript_1.factory.createHeritageClause(typescript_1.default.SyntaxKind.ExtendsKeyword, [typescript_1.factory.createExpressionWithTypeArguments(typescript_1.factory.createIdentifier(e.name), undefined)])], [
        ...([
            typescript_1.factory.createConstructorDeclaration(undefined, undefined, args, typescript_1.factory.createBlock([typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createSuper(), undefined, [typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(e.name + "_types"), typescript_1.factory.createIdentifier(c.name))]))], true)),
            typescript_1.factory.createMethodDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("to_mich"), undefined, undefined, [], undefined, typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(complex ? make_enum_type_to_mich_return_stt(e, c, idx, ci) : make_simple_enum_type_to_mich_return_stt(idx))], false)),
            (0, utils_1.make_to_string_decl)()
        ]),
        ...(c.types.length > 0 ? [
            typescript_1.factory.createMethodDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("get"), undefined, undefined, [], undefined, typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("content")))], false))
        ] : [])
    ]);
};
const enum_to_decl = (e, ci) => {
    switch (e.name) {
        case "state": return [typescript_1.factory.createEnumDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createIdentifier("states"), e.constructors.map((x, i) => {
                return typescript_1.factory.createEnumMember(typescript_1.factory.createIdentifier(x.name), i == 0 ? typescript_1.factory.createNumericLiteral("1") : undefined);
            }))];
        default: return [
            ...([make_enum_type_decl(e), make_enum_class_decl(e)]),
            ...(e.constructors.map((x, i) => make_enum_type_class_decl(e, x, i, e.type_michelson.prim == "or", ci)))
        ];
    }
};
const mich_to_simple_enum_decl = (e) => {
    const is_state = e.name == "state";
    return typescript_1.factory.createVariableStatement([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("mich_to_" + e.name), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("m"), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined)], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(is_state ? "states" : e.name), undefined), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("v"), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createNewExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Nat")), undefined, [typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAsExpression(typescript_1.factory.createIdentifier("m"), typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Mint")), undefined))), typescript_1.factory.createIdentifier("int"))])), typescript_1.factory.createIdentifier("to_big_number")), undefined, []), typescript_1.factory.createIdentifier("toNumber")), undefined, []))], typescript_1.default.NodeFlags.Const)),
            typescript_1.factory.createSwitchStatement(typescript_1.factory.createIdentifier("v"), typescript_1.factory.createCaseBlock([
                ...(e.constructors.map((c, i) => {
                    return typescript_1.factory.createCaseClause(typescript_1.factory.createNumericLiteral(i), [typescript_1.factory.createReturnStatement(is_state ?
                            typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("states"), typescript_1.factory.createIdentifier(c.name)) :
                            typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier(c.name), undefined, []))]);
                })),
                ...([typescript_1.factory.createDefaultClause([typescript_1.factory.createThrowStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier("Error"), undefined, [typescript_1.factory.createBinaryExpression(typescript_1.factory.createStringLiteral("mich_to_asset_type : invalid value "), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.PlusToken), typescript_1.factory.createIdentifier("v"))]))])])
            ]))
        ], true)))], typescript_1.default.NodeFlags.Const));
};
const mich_to_complex_enum_decl = (e, ci) => {
    const create_body = (e) => {
        const error = typescript_1.factory.createThrowStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier("Error"), undefined, [typescript_1.factory.createStringLiteral("mich_to_" + e.name + " : invalid micheline")]));
        if (e.constructors.length == 0) {
            return [error];
        }
        else if (e.constructors.length == 1) {
            return [];
        }
        else {
            const before_last_enum_constructor = e.constructors[e.constructors.length - 2].name;
            const last_enum_constructor = e.constructors[e.constructors.length - 1].name;
            let res = [typescript_1.factory.createIdentifier("m"), []];
            const [_, stts] = e.constructors.reduce(([arg, acc], x) => {
                const before_last = before_last_enum_constructor == x.name;
                const last = last_enum_constructor == x.name;
                const ea = typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAsExpression(arg, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Msingle")), undefined))), typescript_1.factory.createIdentifier("args")), typescript_1.factory.createNumericLiteral("0"));
                const enum_arg = [];
                if (x.types.length == 1) {
                    enum_arg.push((0, utils_1.mich_to_archetype_type)(x.types[0], ea, ci));
                }
                else if (x.types.length > 1) {
                    const ty = { node: "tuple", args: x.types };
                    enum_arg.push((0, utils_1.mich_to_archetype_type)(ty, ea, ci));
                }
                const stt = typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAsExpression(arg, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Msingle")), undefined))), typescript_1.factory.createIdentifier("prim")), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsToken), typescript_1.factory.createStringLiteral(last ? "Right" : "Left")), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier(x.name), undefined, enum_arg))], true), undefined);
                acc.push(stt);
                const arg_next = before_last ? arg : typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAsExpression(arg, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Msingle")), undefined))), typescript_1.factory.createIdentifier("args")), typescript_1.factory.createNumericLiteral("0"));
                return [arg_next, acc];
            }, res);
            stts.push(error);
            return stts;
        }
    };
    return typescript_1.factory.createVariableStatement([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("mich_to_" + e.name), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier("m"), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier("att"), typescript_1.factory.createIdentifier("Micheline")), undefined), undefined)], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(e.name), undefined), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock(create_body(e), true)))], typescript_1.default.NodeFlags.Const));
};
const mich_to_enum_decl = (e, ci) => {
    if (e.type_michelson.prim == "or") {
        return mich_to_complex_enum_decl(e, ci);
    }
    else {
        return mich_to_simple_enum_decl(e);
    }
};
const getStateDecl = (e, ci) => {
    return typescript_1.factory.createMethodDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.AsyncKeyword)], undefined, typescript_1.factory.createIdentifier("get_state"), undefined, undefined, [], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("Promise"), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier("states"), undefined)]), typescript_1.factory.createBlock([
        typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address")), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsToken), typescript_1.factory.createIdentifier("undefined")), typescript_1.factory.createBlock([
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("storage"), undefined, undefined, typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("ex"), typescript_1.factory.createIdentifier("get_raw_storage")), undefined, [typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createThis(), typescript_1.factory.createIdentifier("address"))])))], typescript_1.default.NodeFlags.Const | typescript_1.default.NodeFlags.AwaitContext | typescript_1.default.NodeFlags.ContextFlags | typescript_1.default.NodeFlags.TypeExcludesFlags)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("state"), undefined, undefined, compute_arg(typescript_1.factory.createIdentifier("storage"), "_state", ci.storage_type.value))], typescript_1.default.NodeFlags.Const | typescript_1.default.NodeFlags.AwaitContext | typescript_1.default.NodeFlags.ContextFlags | typescript_1.default.NodeFlags.TypeExcludesFlags)),
            typescript_1.factory.createSwitchStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(mich_to_int(typescript_1.factory.createIdentifier("state")), typescript_1.factory.createIdentifier("to_number")), undefined, []), typescript_1.factory.createCaseBlock(e.constructors.map((x, i) => {
                return typescript_1.factory.createCaseClause(typescript_1.factory.createNumericLiteral(i), [typescript_1.factory.createReturnStatement(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("states"), typescript_1.factory.createIdentifier(x.name)))]);
            })))
        ], true), undefined),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier("states"), typescript_1.factory.createIdentifier(e.constructors[0].name)))
    ], true));
};
const errors_to_decl = (ci) => {
    return typescript_1.factory.createPropertyDeclaration(undefined, undefined, typescript_1.factory.createIdentifier("errors"), undefined, undefined, typescript_1.factory.createObjectLiteralExpression(ci.errors.reduce((acc, x) => {
        const res = (0, utils_1.make_error)(x);
        if (res != null) {
            acc.push(res);
            return acc;
        }
        else {
            return acc;
        }
    }, []).reduce((acc, x) => {
        const [label, expr] = x;
        if (!acc.reduce((a, p) => {
            const [l, _] = p;
            if (!a) {
                return label == l;
            }
            else {
                return true;
            }
        }, false)) {
            acc.push([label, expr]);
        }
        return acc;
    }, []).map(x => {
        const [label, expr] = x;
        return typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(label), expr);
    }), true));
};
const not_a_set = (a) => {
    return a.container_type_michelson.prim != "set";
};
const view_to_getter = (v) => {
    return Object.assign(Object.assign({}, v), { name: "view_" + v.name, return_michelson: {
            value: { prim: "int", annots: [] },
            is_storable: true
        } });
};
const get_nodes = (contract_interface, settings) => {
    return [
        ...(get_imports(contract_interface, settings)),
        // storage
        ...(settings.language == Language.Michelson ? generate_storage_utils(contract_interface) : []),
        // events
        ...(contract_interface.types.events.map(x => recordToInterfaceDecl(x, contract_interface))).flat(),
        // enums
        ...(contract_interface.types.enums.map(x => (enum_to_decl(x, contract_interface)))).flat(),
        ...(contract_interface.types.enums.map(x => (mich_to_enum_decl(x, contract_interface)))),
        // records
        ...(contract_interface.types.records.map(x => recordToInterfaceDecl(x, contract_interface))).flat(),
        ...(contract_interface.types.records.map(recordToMichTypeDecl)),
        // ...(contract_interface.types.records.map(mich_to_record_decl)),
        // asset keys
        ...(contract_interface.types.assets.map(x => assetKeyToInterfaceDecl(x, contract_interface))).flat(),
        ...(contract_interface.types.assets.map(assetKeyToMichTypeDecl)),
        // asset values
        ...(contract_interface.types.assets.filter(not_a_set).map(x => assetValueToInterfaceDecl(x, contract_interface))).flat(),
        ...(contract_interface.types.assets.filter(not_a_set).map(assetValueToMichTypeDecl)),
        // ...(contract_interface.types.assets.filter(not_a_set).map(mich_to_asset_value_decl)),
        // asset containers
        ...(contract_interface.types.assets.map(x => assetContainerToTypeDecl(x, contract_interface))),
        ...(contract_interface.types.assets.map(x => assetContainerToMichTypeDecl(x))),
        // entrypoint argument to michelson
        ...(contract_interface.entrypoints.map(x => entryToArgToMichDecl(x, contract_interface))),
        // getter/view argument to michelson
        ...(contract_interface.getters.map(x => entryToArgToMichDecl(x, contract_interface))),
        ...(contract_interface.views.map(view_to_getter).map(x => entryToArgToMichDecl(x, contract_interface))),
        ...(contract_interface.getters.map(decl_callback_deploy)),
        ...([
            // contract class
            get_contract_class_node(contract_interface, settings),
            // contract instance
            get_contract_decl(contract_interface)
        ]),
    ];
};
var Target;
(function (Target) {
    Target[Target["Experiment"] = 0] = "Experiment";
    Target[Target["Dapp"] = 1] = "Dapp";
})(Target = exports.Target || (exports.Target = {}));
var Language;
(function (Language) {
    Language[Language["Archetype"] = 0] = "Archetype";
    Language[Language["Michelson"] = 1] = "Michelson";
})(Language = exports.Language || (exports.Language = {}));
const generate_binding = (raw_contract_interface, settings) => {
    const contract_interface = (0, utils_1.raw_to_contract_interface)(raw_contract_interface);
    const nodeArr = typescript_1.factory.createNodeArray(get_nodes(contract_interface, settings));
    const result = printer.printList(typescript_1.ListFormat.MultiLine, nodeArr, file);
    return result;
};
exports.generate_binding = generate_binding;
//# sourceMappingURL=main.js.map
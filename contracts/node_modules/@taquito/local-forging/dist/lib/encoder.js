"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encoders = void 0;
const codec_1 = require("./codec");
const constants_1 = require("./constants");
const codec_2 = require("./michelson/codec");
const operation_1 = require("./schema/operation");
exports.encoders = {
    [constants_1.CODEC.SECRET]: (val) => val,
    [constants_1.CODEC.RAW]: (val) => val,
    [constants_1.CODEC.TZ1]: codec_1.tz1Encoder,
    [constants_1.CODEC.BRANCH]: codec_1.branchEncoder,
    [constants_1.CODEC.ZARITH]: codec_1.zarithEncoder,
    [constants_1.CODEC.PUBLIC_KEY]: codec_1.publicKeyEncoder,
    [constants_1.CODEC.PKH]: codec_1.publicKeyHashEncoder,
    [constants_1.CODEC.PKH_ARR]: codec_1.publicKeyHashesEncoder,
    [constants_1.CODEC.DELEGATE]: codec_1.delegateEncoder,
    [constants_1.CODEC.SCRIPT]: codec_2.scriptEncoder,
    [constants_1.CODEC.BALLOT_STATEMENT]: codec_1.ballotEncoder,
    [constants_1.CODEC.PROPOSAL]: codec_1.proposalEncoder,
    [constants_1.CODEC.PROPOSAL_ARR]: codec_1.proposalsEncoder,
    [constants_1.CODEC.INT32]: codec_1.int32Encoder,
    [constants_1.CODEC.PARAMETERS]: codec_1.parametersEncoder,
    [constants_1.CODEC.ADDRESS]: codec_1.addressEncoder,
    [constants_1.CODEC.SMART_ROLLUP_ADDRESS]: codec_1.smartRollupAddressEncoder,
    [constants_1.CODEC.SMART_CONTRACT_ADDRESS]: codec_1.smartContractAddressEncoder,
    [constants_1.CODEC.SMART_ROLLUP_COMMITMENT_HASH]: codec_1.smartRollupCommitmentHashEncoder,
    [constants_1.CODEC.VALUE]: codec_1.valueParameterEncoder,
    [constants_1.CODEC.INT16]: codec_1.int16Encoder,
    [constants_1.CODEC.BLOCK_PAYLOAD_HASH]: codec_1.blockPayloadHashEncoder,
    [constants_1.CODEC.ENTRYPOINT]: codec_1.entrypointNameEncoder,
    [constants_1.CODEC.BURN_LIMIT]: codec_1.burnLimitEncoder,
    [constants_1.CODEC.DEPOSITS_LIMIT]: codec_1.depositsLimitEncoder,
    [constants_1.CODEC.PVM_KIND]: codec_1.pvmKindEncoder,
    [constants_1.CODEC.PADDED_BYTES]: codec_1.paddedBytesEncoder,
    [constants_1.CODEC.SMART_ROLLUP_MESSAGE]: codec_1.smartRollupMessageEncoder,
};
exports.encoders[constants_1.CODEC.OPERATION] = (0, operation_1.operationEncoder)(exports.encoders);
exports.encoders[constants_1.CODEC.OP_ACTIVATE_ACCOUNT] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.ActivationSchema)(val);
exports.encoders[constants_1.CODEC.OP_DELEGATION] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.DelegationSchema)(val);
exports.encoders[constants_1.CODEC.OP_TRANSACTION] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.TransactionSchema)(val);
exports.encoders[constants_1.CODEC.OP_ORIGINATION] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.OriginationSchema)(val);
exports.encoders[constants_1.CODEC.OP_BALLOT] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.BallotSchema)(val);
exports.encoders[constants_1.CODEC.OP_ATTESTATION] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.AttestationSchema)(val);
exports.encoders[constants_1.CODEC.OP_ENDORSEMENT] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.EndorsementSchema)(val);
exports.encoders[constants_1.CODEC.OP_SEED_NONCE_REVELATION] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.SeedNonceRevelationSchema)(val);
exports.encoders[constants_1.CODEC.OP_PROPOSALS] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.ProposalsSchema)(val);
exports.encoders[constants_1.CODEC.OP_REVEAL] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.RevealSchema)(val);
exports.encoders[constants_1.CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.RegisterGlobalConstantSchema)(val);
exports.encoders[constants_1.CODEC.OP_TRANSFER_TICKET] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.TransferTicketSchema)(val);
exports.encoders[constants_1.CODEC.OP_INCREASE_PAID_STORAGE] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.IncreasePaidStorageSchema)(val);
exports.encoders[constants_1.CODEC.OP_UPDATE_CONSENSUS_KEY] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.UpdateConsensusKeySchema)(val);
exports.encoders[constants_1.CODEC.OP_DRAIN_DELEGATE] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.DrainDelegateSchema)(val);
exports.encoders[constants_1.CODEC.OP_SMART_ROLLUP_ORIGINATE] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.SmartRollupOriginateSchema)(val);
exports.encoders[constants_1.CODEC.OP_SMART_ROLLUP_ADD_MESSAGES] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.SmartRollupAddMessagesSchema)(val);
exports.encoders[constants_1.CODEC.OP_SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.SmartRollupExecuteOutboxMessageSchema)(val);
exports.encoders[constants_1.CODEC.MANAGER] = (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.ManagerOperationSchema);
exports.encoders[constants_1.CODEC.OP_SET_DEPOSITS_LIMIT] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.SetDepositsLimitSchema)(val);
exports.encoders[constants_1.CODEC.OP_FAILING_NOOP] = (val) => (0, operation_1.schemaEncoder)(exports.encoders)(operation_1.FailingNoopSchema)(val);
